

#include <catch.hpp>
#include <runner.hpp>

#include <ast/Expressions/VName.hpp>

TEST_CASE( "VName: Test integer" , "[VName]" ) {
    run<ast::VName>("5");
}

TEST_CASE( "VName: Test bool" , "[VName]" ) {
    run<ast::VName>("false");
}

TEST_CASE( "VName: Test string" , "[VName]" ) {
    run<ast::VName>("\"test string\"");
}

TEST_CASE( "VName: Test integer sub-expression" , "[VName]" ) {
    SECTION("singled nested") {
        run<ast::VName>("(5)");
    }
    SECTION("double nested") {
        run<ast::VName>("((5))");
    }
    SECTION("triple nested") {
        run<ast::VName>("(((5)))");
    }

}

TEST_CASE( "VName: Test string sub-expression" , "[VName]" ) {
    SECTION("single nested") {
        run<ast::VName>("(\"parens everywhere\")");
    }
    SECTION("double nested") {
        run<ast::VName>("((\"parens everywhere\"))");
    }
    SECTION("triple nested") {
        run<ast::VName>("(((\"parens everywhere\")))");
    }
}

TEST_CASE( "VName: Test bool sub-expression" , "[VName]" ) {
    SECTION("single nested") {
        run<ast::VName>("(true)");
    }
    SECTION("double nested") {
        run<ast::VName>("((true))");
    }
    SECTION("triple nested") {
        run<ast::VName>("(((true)))");
    }
}

TEST_CASE("VName: large number nested parens" , "[VName]") {
    SECTION("integer") {
        run<ast::VName
    }
    SECTION("bool") {
        run<ast::VName>("(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))");
    }
    SECTION("string") {
        run<ast::VName>("(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((\"this is the string\")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))");
    }
    SECTION("function") {
        run<ast::VName>("(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((f())))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))");
    }
}
