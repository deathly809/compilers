
#
#   
#
#
#
#
#   What we will support:
#       loops
#       conditionals
#       declarations
#       assignment
#       structures
#       function
#       very limited library (this includes import)
#       global variables and constants
#       
#       
#   What we want to support
#       variadic functions
#       multiple return values
#       interfaces
#       garbage collection  (very generic)
#       anonymous functions
#       
#
#
#   What we really would like to support
#       goroutines
#       networking
#       
#
#
#   Legend:
#
#       Comments start with #
#       Non-terminals are all uppercase
#       Terminals are lowercase
#       Initial production starts with :=
#       Additional substitutions have a | afterwards
#
#



PROGRAM     := packageID IMPORTS GLOBAL

GLOBAL      := CONST_DECL   GLOBAL
            | VAR_DECL      GLOBAL
            | FUNC_DEF      GLOBAL
            | TYPE_DEF      GLOBAL

CONST_DECL := const ASSIGNMENT
            | const (  ASSIGN_LIST )

VAR_DECL    := var ASSIGNMENT
            | var ( ASSIGN_LIST )


ASSIGN_LIST :=  ASSIGNMENT ASSIGN_LIST
            |   ASSIGNMENT


# Function

FUNC_DEF    := func ID ( OPT_ARG ) OPT_RET { FUNC_BODY }

OPT_PARAMS  :=  FUNC_PARAMS
            |   EPS

FUNC_PARAMS :=  TYPE_LIST FUNC_PARAMS
            |   ID TYPE
            |   VARIADIC

TYPE_LIST   :=  ID_LIST TYPE

ID_LIST     :=  ID , ID_LIST
            |   ID

VARIADIC    := ... TYPE

OPT_RET     :=  EPS
            |   TYPE
            |   ID TYPE
            |   (OPT_ARGS)


BODY        :=  STAT_LIST
            |   EPS

STAT_LIST   :=  STATEMENT STAT_LIST
            |   STATEMENT

STATEMENT   :=  ASSIGNMENT
            |   LOOP
            |   COND
            |   DECLAR
            |   RETURN

ASSIGNMENT  :=  ID = EXPRESSION

LOOP        :=  for EXPRESSION { BODY }

COND        :=  if EXPRESSION { BODY } OPT_ELIF
OPT_ELIF    :=  else 


DECLAR      := var ID type
            |   var ID type = EXPRESSION
            |   ID := EXPRESSION

RETURN      :=  return OPT_RET_VALUES



# Type Definitions

TYPE_DEF    :=  type ID STRUCT
            |   type ID INTERFACE
            |   type ID ID



# TERMINALS


B_OPS       :=  +
            |   /
            |   +
            |   -
            |   |
            |   &
            |   ||
            |   &&

U_OPS       :=  !   


TYPE        :=  int
            |   int32
            |   int64
            |   float32
            |   float64
            |   string
            |   boolean
            |   short
            |   byte
            |   rune
            |   ID